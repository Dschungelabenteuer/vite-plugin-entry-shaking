// src/client/vite.config.ts
import { fileURLToPath } from "url";
import { defineConfig } from "file:///E:/Development/projects/vite-plugin-entry-shaking/node_modules/.pnpm/vite@5.1.0_@types+node@20.8.10/node_modules/vite/dist/node/index.js";
import vue from "file:///E:/Development/projects/vite-plugin-entry-shaking/node_modules/.pnpm/@vitejs+plugin-vue@4.5.0_vite@5.1.0_vue@3.4.6/node_modules/@vitejs/plugin-vue/dist/index.mjs";

// mocks/entries.ts
import { faker as faker2 } from "file:///E:/Development/projects/vite-plugin-entry-shaking/node_modules/.pnpm/@faker-js+faker@8.3.1/node_modules/@faker-js/faker/dist/esm/index.mjs";

// mocks/utils.ts
import { faker } from "file:///E:/Development/projects/vite-plugin-entry-shaking/node_modules/.pnpm/@faker-js+faker@8.3.1/node_modules/@faker-js/faker/dist/esm/index.mjs";
function getChronologicalTime(count, index) {
  const today = /* @__PURE__ */ new Date();
  const yesterday = new Date(today.getTime() - 864e5);
  const start = yesterday.setHours(23, 37, 0, 0);
  const end = today.setHours(0, 48, 0, 0);
  const step = Math.round((end - start) / count);
  const out = start + Math.round(step * (index + 1));
  return out;
}
var getRandomProjectPath = () => `~/path/to/project/src${faker.system.filePath()}`;

// mocks/entries.ts
var mockedEntryCount = 28;
var from = `import Lol from 'lol';
import { ref, Item } from 'vue';
import { baz, foo, fer } from 'somewhere';
import Pouet from 'Pouet';
import Prout from 'prout';

const a = 1;

`;
var to = `import Lol from 'lol';
import { Item } from 'vue';
import { baz, bar, fer } from 'somewhere';
import Pouet from 'Pouet';
import Prout from 'prout';


const odd = true;

const new1 = 1;
const new2 = 2;
`;
function mockWildcardExports() {
  const numberOfDirectExports = faker2.number.int({ min: 0, max: 2 });
  const numberOfNamedExports = faker2.number.int({ min: 0, max: 3 });
  return {
    named: new Map(
      new Array(numberOfNamedExports).fill(0).map(() => [faker2.lorem.word(), getRandomProjectPath()])
    ),
    direct: new Array(numberOfDirectExports).fill(0).map(() => getRandomProjectPath())
  };
}
function mockExports() {
  return new Map(
    new Array(faker2.number.int({ min: 2, max: 12 })).fill(0).map(() => [
      faker2.lorem.word(),
      {
        path: getRandomProjectPath(),
        importDefault: faker2.datatype.boolean({ probability: 0.34 }),
        originalName: "originalstring",
        alias: "aliasstring",
        selfDefined: faker2.datatype.boolean({ probability: 0.12 })
      }
    ])
  );
}
var entries = new Map(
  new Array(mockedEntryCount).fill(0).map(() => {
    const timeOne = faker2.number.int({ min: 200, max: 500 });
    const timeTwo = faker2.number.int({ min: 200, max: 500 });
    const wildcardExports = mockWildcardExports();
    const exports = mockExports();
    const depth = faker2.number.int({ min: 0, max: 1 });
    return [
      getRandomProjectPath(),
      {
        source: from,
        updatedSource: to,
        wildcardExports,
        depth,
        exports,
        isImplicit: faker2.datatype.boolean({ probability: 0.12 }),
        time: Math.max(timeOne, timeTwo),
        self: Math.min(timeOne, timeTwo)
      }
    ];
  })
);

// mocks/transforms.ts
import { faker as faker3 } from "file:///E:/Development/projects/vite-plugin-entry-shaking/node_modules/.pnpm/@faker-js+faker@8.3.1/node_modules/@faker-js/faker/dist/esm/index.mjs";
var mockedTransformCount = 64;
var transforms = new Array(mockedTransformCount).fill(0).map((_2, index) => {
  const time = faker3.number.int({ min: 0, max: 600 });
  return {
    time,
    id: getRandomProjectPath(),
    source: faker3.lorem.sentence(),
    transformed: faker3.lorem.sentence(),
    timestamp: getChronologicalTime(mockedTransformCount, index)
  };
});

// mocks/logs.ts
import { faker as faker4 } from "file:///E:/Development/projects/vite-plugin-entry-shaking/node_modules/.pnpm/@faker-js+faker@8.3.1/node_modules/@faker-js/faker/dist/esm/index.mjs";
var mockedLogCount = 444;
var logs = new Array(mockedLogCount).fill(0).map((_2, index) => ({
  content: faker4.lorem.sentence(),
  level: faker4.helpers.arrayElement(["info", "warn", "error", "debug", "success"]),
  timestamp: getChronologicalTime(mockedLogCount, index)
}));

// src/shared.ts
var PLUGIN_MESSAGE_PREFIX = "vpes";
var wsMessageName = (name) => `${PLUGIN_MESSAGE_PREFIX}:${name}`;
var READY = wsMessageName("getInitialState");

// src/serializer.ts
var TYPE = "t";
var MAP = "m";
var VAL = "v";
var stringify = (v) => JSON.stringify(v, replacer);
var parse = (v) => JSON.parse(v, reviver);
var isObject = (v) => typeof v === "object" && v !== null;
var replacer = (_2, v) => v instanceof Map ? { [TYPE]: MAP, [VAL]: [...v] } : v;
var reviver = (_2, v) => isObject(v) && v[TYPE] === MAP ? new Map(v[VAL]) : v;
var JSONMap = { stringify, parse };

// src/client/dev.plugin.ts
var _ = wsMessageName;
var consumer = {
  name: "vpes-debugger-with-mocks",
  version: "0.0.0"
};
function devPlugin() {
  return {
    name: "vpes-client-dev-plugin",
    configureServer({ ws }) {
      ws.on(READY, () => {
        ws.send(READY, JSONMap.stringify({ entries, logs, consumer }));
        transforms.forEach((transform) => {
          ws.send(_("registerTransform"), JSONMap.stringify(transform));
        });
      });
    }
  };
}
var dev_plugin_default = devPlugin;

// src/client/vite.config.ts
var __vite_injected_original_import_meta_url = "file:///E:/Development/projects/vite-plugin-entry-shaking/packages/debugger/src/client/vite.config.ts";
var outDir = "../../dist/client";
var vite_config_default = defineConfig({
  base: "./",
  build: { outDir },
  plugins: [vue(), dev_plugin_default()],
  resolve: {
    alias: {
      "#store": fileURLToPath(new URL("./store.ts", __vite_injected_original_import_meta_url)),
      "#utils": fileURLToPath(new URL("./utils.ts", __vite_injected_original_import_meta_url)),
      "#types": fileURLToPath(new URL("./types.ts", __vite_injected_original_import_meta_url)),
      "@assets": fileURLToPath(new URL("./assets", __vite_injected_original_import_meta_url)),
      "@component": fileURLToPath(new URL("./components", __vite_injected_original_import_meta_url)),
      "@composable": fileURLToPath(new URL("./composables", __vite_injected_original_import_meta_url)),
      "@helpers": fileURLToPath(new URL("./helpers", __vite_injected_original_import_meta_url)),
      "@views": fileURLToPath(new URL("./views", __vite_injected_original_import_meta_url)),
      "@pages": fileURLToPath(new URL("./pages", __vite_injected_original_import_meta_url)),
      "@styles": fileURLToPath(new URL("./styles", __vite_injected_original_import_meta_url))
    }
  },
  css: {
    preprocessorOptions: {
      scss: { additionalData: `@import "@styles/global.scss";` }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
